admin:
  access_log:
    - name: envoy.access_loggers.file
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
        path: "/dev/stdout"
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 8090
static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 8443
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:
          - name: envoy.access_loggers.stdout
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
          codec_type: AUTO
          stat_prefix: ingress_https
          # [START grpc_gke_nlb_tutorial_envoy_route_config]
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              # require_tls: ALL
              routes:
              - match:
                  prefix: "/Categories/"
                route:
                  cluster: grpc-api
              - match:
                  prefix: "/weather/"
                route:
                  prefix_rewrite: "/"
                  cluster: weather-api
          # [END grpc_gke_nlb_tutorial_envoy_route_config]
          http_filters:
          - name: envoy.filters.http.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              pass_through_mode: false
              headers:
              - name: ":path"
                string_match:
                  exact: "/healthz"
              - name: "x-envoy-livenessprobe"
                string_match:
                  exact: "healthz"
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          require_client_certificate: false
          common_tls_context:
            tls_certificates:
            - certificate_chain:
                filename: /etc/ssl/envoy/tls.crt
              private_key:
                filename: /etc/ssl/envoy/tls.key
  # [START grpc_gke_nlb_tutorial_envoy_cluster_echo]
  clusters:
  - name: grpc-api
    connect_timeout: 0.5s
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        # upstream_http_protocol_options:
        #   auto_sni: true
        # common_http_protocol_options:
        #   idle_timeout: 1s
        explicit_http_config:
          http2_protocol_options:
            max_concurrent_streams: 100
    type: STRICT_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: grpc-api
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: grpc-api.default.svc.cluster.local
                port_value: 1080
    health_checks:
      timeout: 1s
      interval: 5s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: {}
  - name: weather-api
    type: STRICT_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: weather-api
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: weather-api.default.svc.cluster.local
                port_value: 80
layered_runtime:
  layers:
    - name: static_layer_0
      static_layer:
        envoy:
          resource_limits:
            listener:
              listener_0:
                connection_limit: 10000
        overload:
          global_downstream_max_connections: 50000